from aiogram.filters import Command
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from app.messages import search_reply_message
from app.keyboard.main import search_options_kb, kb, search_again_kb
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.services.find import find
import math 

class Find(StatesGroup):
    waiting_for_option = State()
    waiting_for_input = State()
    waiting_for_article = State()
router = Router()

@router.message(F.text == "–ù–∞–π—Ç–∏")
@router.message(Command("find"))
async def find_product_command(message: Message, state: FSMContext):
    await message.answer(text=search_reply_message,
                         reply_markup=search_options_kb)
    await state.set_state(Find.waiting_for_option)

# --- —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã ---
@router.message(Find.waiting_for_option, F.text == "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é ü™ß")
async def search_by_name(message: Message, state: FSMContext):
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Find.waiting_for_input) 

@router.message(Find.waiting_for_option, F.text == "–ü–æ –∞—Ä—Ç–∏–∫—É–ª—É üìÉ")
async def search_by_article(message: Message, state: FSMContext):
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Find.waiting_for_article)


@router.message(Find.waiting_for_option, F.text == "–û—Ç–º–µ–Ω–∞ üî¥")
async def cancel_search(message: Message, state: FSMContext):
    await message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=kb)
    await state.clear()

@router.message(Find.waiting_for_input, F.text)
async def result(message: Message, state: FSMContext):
    search_query = message.text.strip()
    results = find(search_query, "name")
    print("–ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª—Å—è")
    if not results:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=search_again_kb)
        await state.clear()
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    response = "üîç –ù–∞–π–¥–µ–Ω–æ:\n\n"
    
    for i, product in enumerate(results, 1):
        product_text = f"{i}. üì¶ {product['name']}\n"
        product_text += f"   –ö–æ–¥: {product.get('pin_code', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        product_text += f"   –¶–µ–Ω–∞ –ø–æ —Å–∫–ª–∞–¥—É: {product.get('primary_price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        product_text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.get('count', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        response += product_text
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    if response:
        await message.answer(response, reply_markup=search_again_kb)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞"
@router.message(F.text == "–ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞")
async def search_again(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞:", reply_markup=search_options_kb)
    await state.set_state(Find.waiting_for_option)

@router.message(Find.waiting_for_article, F.text)
async def result_by_article(message: Message, state: FSMContext):
    print("–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É")
    search_query = message.text.strip()
    results = find(search_query, "code")
    print("–ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª—Å—è")
    if not results:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=search_again_kb)
        await state.clear()
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    response = "üîç –ù–∞–π–¥–µ–Ω–æ:\n\n"
    
    for i, product in enumerate(results, 1):
        product_text = f"{i}. üì¶ {product['name']}\n"
        product_text += f"   –ö–æ–¥: {product.get('pin_code', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        product_text += f"   –¶–µ–Ω–∞ –ø–æ —Å–∫–ª–∞–¥—É: {product.get('primary_price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        product_text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.get('count', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        response += product_text
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    if response:
        await message.answer(response, reply_markup=search_again_kb)
    
    await state.clear()